//                      https://ide.codingblocks.com/#/s/6855

#include<iostream>
#include<list>
#include<queue>  // only need in  bfs
using namespace std;


//if node exist from 0 to v-1 then go for this otherwise use map /generic template
// array of linked list  implementation



class graph{
  
  int V;
  list<int> *l;
  public:
    graph(int v)
    {
        V=v;
        l=new list<int> [V];
    }
    
    void addedge(int u,int v,bool bidir=true)
    {
        l[u].push_back(v);
        if(bidir)
        {
            l[v].push_back(u);
        }
    }
    void print()
    {
        for(int i=0;i<V;i++)
        {
            cout<<i<<"->";
            for(auto it:l[i])
            {
                cout<<it<<",";
            }
            cout<<endl;
        }
    }
    
    void bfs(int s)
    {
        vector<bool> visited(V,0);
        queue<int> q;
        q.push(s);
        visited[s]=true;
        while(!q.empty())
        {
            int node=q.front();
            cout<<node<<",";
            q.pop();
            for(int i:l[node])
            {
                if(!visited[i])
                {
                    q.push(i);
                    visited[i]=true;
                }
            }
        }
    }
    void dfshelper(vector<bool> &visited,int node)
    {
        visited[node]=1;
        cout<<node<<",";
        for(int i:l[node])
        {
            if(!visited[i])
            {
                dfshelper(visited,i);
            }
        }
    }
    
    
    void dfs(int s)
    {
        vector<bool> visited(V,0);
        
        dfshelper(visited,s);
    }
    
    
  
  
    
};

int main()
{
    graph g(6);
    g.addedge(0,1);
    g.addedge(1,2);
    g.addedge(2,4);
    g.addedge(4,0);
    g.addedge(4,3);
    g.addedge(2,3);
    g.addedge(3,5);
    g.print();
    cout<<"bfs: ";
    g.bfs(0);
    cout<<"\ndfs: ";
    g.dfs(0);
    
    return 0;
}
